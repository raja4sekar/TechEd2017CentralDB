PROCEDURE "get_product_by_filter" (
      IN im_product_filter_string varchar(5000),
      IN im_start_date date,
      IN im_end_date date, 
      OUT EX_PRODUCTS TABLE (
                   PRODUCTID NVARCHAR(10),
                   DELIVERYDATE DAYDATE,
                   NUM_DELIVERED_PRODUCTS BIGINT,
                   CUMULATIVE_SUM BIGINT )   )
   LANGUAGE SQLSCRIPT
   SQL SECURITY INVOKER
   AS
BEGIN

DECLARE temp_date DATE;
DECLARE MYCOND CONDITION FOR SQL_ERROR_CODE 10001;

INSERT INTO "log.messages"
    (ERROR_TIMESTAMP, OBJECT_SCHEMA_NAME, OBJECT_NAME, PARAMETER, SQL_ERROR_CODE, SQL_ERROR_MESSAGE)
    VALUES (current_timestamp, ::CURRENT_OBJECT_SCHEMA,
            ::CURRENT_OBJECT_NAME, null, null,
            'Chuck Norris doesn''t need try-catch, exceptions are too afraid too raise!!!');
BEGIN
   DECLARE EXIT HANDLER FOR MYCOND
     BEGIN
      DECLARE parameter NVARCHAR(256) = 'start_date = '|| :im_start_date || 
                                       ' end_date = '||  :im_end_date; 
      temp_date = :im_start_date;
      im_start_date = :im_end_date;
      im_end_date = :temp_date;
      BEGIN AUTONOMOUS TRANSACTION
	  INSERT INTO "log.errors" 
	       (ERROR_TIMESTAMP, OBJECT_SCHEMA_NAME, OBJECT_NAME, PARAMETER, SQL_ERROR_CODE, SQL_ERROR_MESSAGE)
	       VALUES (current_timestamp,::CURRENT_OBJECT_SCHEMA,::CURRENT_OBJECT_NAME, 
	               :parameter , ::SQL_ERROR_CODE, ::SQL_ERROR_MESSAGE);
      END;	               
     END;
           
    if :im_start_date > :im_end_date THEN
        SIGNAL MYCOND SET MESSAGE_TEXT = 'Start date must be smaller then end date';
    END IF;
END;


pre_filtered_products = SELECT * FROM "MD.Products"
                              WHERE CATEGORY NOT IN ('Laser printers');
       
user_filtered_products = APPLY_FILTER(:pre_filtered_products, 
                                         :im_product_filter_string ) ;

filtered_items  = 
        select pi."PRODUCT.PRODUCTID" as PRODUCTID, 
               pi.DELIVERYDATE 
                  from :user_filtered_products as p
                      inner join "PO.Item" as pi
                           on p.productid = pi."PRODUCT.PRODUCTID"
                              where pi.DELIVERYDATE >= :im_start_date
                                and pi.DELIVERYDATE <= :im_end_date;

aggregated_filtered_items = 
          SELECT  PRODUCTID, DELIVERYDATE, 
                  COUNT(PRODUCTID) AS NUM_DELIVERED_PRODUCTS
                     FROM :filtered_items
                        GROUP BY PRODUCTID, DELIVERYDATE
                        ORDER BY PRODUCTID, DELIVERYDATE;

CALL "calculate_cumulative_sum_of_delivered_products"(
       IM_PRODUCTS => :aggregated_filtered_items,
       EX_PRODUCTS => :products ) ;

ex_products = select * from :PRODUCTS order by PRODUCTID, DELIVERYDATE;

END
